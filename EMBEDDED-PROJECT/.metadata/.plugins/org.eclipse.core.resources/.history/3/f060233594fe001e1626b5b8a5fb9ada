
#include "main.h"
#include "rc522.h"
#include "string.h"
#include "keypad.h"
#include "stdio.h"

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim2;

uint8_t status;
uint8_t str[MAX_LEN]; // Max_LEN = 16
uint8_t *ptr = &str[0];
uint8_t sNum[5];

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);

void change (uint8_t* x){
	*x = 0;
}


int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();

  MFRC522_Init();

  while (1)
  {
	  //	  PB 7 acchi waali pin hai
	  	  status = MFRC522_Request(PICC_REQIDL, str);
	  	  status = MFRC522_Anticoll(str);
	  	  memcpy(sNum, str, 5);
	  	  HAL_Delay(10);

	  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
	  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);

//	  	  if((str[0]==195) && (str[1]==32) && (str[2]==197) && (str[3]==169) && (str[4]==247) )
	  	  if((str[1]==32) && (str[2]==197) && (str[3]==169) && (str[4]==247) )
	  	     {
	  	       HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,1);
	  	       HAL_Delay(1000);
	  //	       str[0] = 0;
	  	       change(&str[0]);
	  //	       HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
	  //	       HAL_Delay(3000);
	  	       }
//	  	  else if((str[0]==128) && (str[1]==32) && (str[2]==196) && (str[3]==163) && (str[4]==250) )
	  	  else if( (str[1]==32) && (str[2]==196) && (str[3]==163) && (str[4]==250) )
	  	     {
	  		   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,1);
	  	       HAL_Delay(1000);
	  //	       str[0] = 0;
	  	       change(&str[0]);
	  //	       HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
	  //	       HAL_Delay(3000);
	  	       }
//	  	  else if((str[0]==32) && (str[1]==32) && (str[2]==193) && (str[3]==163) && (str[4]==125) )
	  	  else if((str[1]==32) && (str[2]==193) && (str[3]==163) && (str[4]==125) )
	  	     {
	  		   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,1);
	  	       HAL_Delay(1000);
	  //	       str[0] = 0;
	  	       change(&str[0]);
	  //	       HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
	  //	       HAL_Delay(3000);
	  	       }

	  // galat waale od ye hai
//	  	  else if((str[0]==62) && (str[1]==32) && (str[2]==56) && (str[3]==76) && (str[4]==150) )
	  	  else if( (str[1]==32) && (str[2]==56) && (str[3]==76) && (str[4]==150) )
	  	     {
	  		   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,1);
	  	       HAL_Delay(3000);
	  	       }
//	  	  else if((str[0]==179) && (str[1]==32) && (str[2]==122) && (str[3]==166) && (str[4]==182) )
	  	  else if( (str[1]==32) && (str[2]==122) && (str[3]==166) && (str[4]==182) )
	  	     {
	  		   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,1);
	  	       HAL_Delay(3000);
	  	       }

// rfid ka poora dekh liya
// an agar pb7 high hai toh keypad se input lena hai
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1){

	  	  }

  }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 15;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|C2_Pin|C3_Pin|D5_Pin
                          |D6_Pin|C1_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|D4_Pin|D7_Pin|en_Pin
                          |rs_Pin|ext_1_Pin|int_led_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 C2_Pin C3_Pin D5_Pin
                           D6_Pin C1_Pin C0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|C2_Pin|C3_Pin|D5_Pin
                          |D6_Pin|C1_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : R0_Pin R2_Pin R3_Pin R1_Pin */
  GPIO_InitStruct.Pin = R0_Pin|R2_Pin|R3_Pin|R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 D4_Pin D7_Pin en_Pin
                           rs_Pin ext_1_Pin int_led_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|D4_Pin|D7_Pin|en_Pin
                          |rs_Pin|ext_1_Pin|int_led_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : ext_2_Pin */
  GPIO_InitStruct.Pin = ext_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ext_2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
